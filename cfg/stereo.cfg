#! /usr/bin/env python
 
PACKAGE='ueye'
  
#from driver_base.msg import SensorLevels
from dynamic_reconfigure.msg import SensorLevels
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

trigger_enum = gen.enum( [gen.const("TGR_AUTO",               int_t, 0,   ""),
                          gen.const("TGR_SOFTWARE",           int_t, 1,   ""),
                          gen.const("TGR_HARDWARE_RISING",    int_t, 2,   ""),
                          gen.const("TGR_HARDWARE_FALLING",   int_t, 3,   ""),
                          gen.const("TGR_L_MASTER_R_RISING",  int_t, 4,   ""),
                          gen.const("TGR_L_MASTER_R_FALLING", int_t, 5,   ""),
                          gen.const("TGR_R_MASTER_L_RISING",  int_t, 6,   ""),
                          gen.const("TGR_R_MASTER_L_FALLING", int_t, 7,   ""),
                         ],"Enum to set trigger mode")

color_enum = gen.enum( [gen.const("COLOR_MONO8",      int_t, 0,   ""),
                        gen.const("COLOR_MONO16",     int_t, 1,   ""),
                        gen.const("COLOR_YUV",        int_t, 2,   ""),
                        gen.const("COLOR_YCbCr",      int_t, 3,   ""),
                        gen.const("COLOR_BGR5",       int_t, 4,   ""),
                        gen.const("COLOR_BGR565",     int_t, 5,   ""),
                        gen.const("COLOR_BGR8",       int_t, 6,   ""),
                        gen.const("COLOR_BGRA8",      int_t, 7,   ""),
                        gen.const("COLOR_BGRY8",      int_t, 8,   ""),
                        gen.const("COLOR_RGB8",       int_t, 9,   ""),
                        gen.const("COLOR_RGBA8",      int_t, 10,  ""),
                        gen.const("COLOR_RGBY8",      int_t, 11,  ""),
                       ],"Enum to set color mode")
                       
mirror_enum = gen.enum( [gen.const("NO_MIRROR",           int_t, 0,   ""),
                         gen.const("MIRROR_UP_DOWN",      int_t, 1,   ""),
                         gen.const("MIRROR_LEFT_RIGHT",   int_t, 2,   ""),
                         gen.const("MIRROR_BOTH",         int_t, 3,   ""),
                       ],"Enum to set mirror image mode")
                       
subsampling_enum = gen.enum( [gen.const("NORMAL",     int_t, 0,   ""),
                              gen.const("2x",     		int_t, 2,   ""),
                              gen.const("4x",        	int_t, 4,   ""),
                              gen.const("8x",  				int_t, 8,   ""),
                              gen.const("16x",  			int_t, 16,   ""),
                            ],"Enum to horizontal subsampling mode")

#       Name                              Type        Reconfiguration level               Description                                               Default  Min    Max
gen.add("config_path",                    str_t,      SensorLevels.RECONFIGURE_RUNNING,   "Path to load and store cfg files.",                      "")
gen.add("color",                          int_t,      SensorLevels.RECONFIGURE_RUNNING,   "Color mode",                                             6,  edit_method = color_enum)
gen.add("trigger",                        int_t,      SensorLevels.RECONFIGURE_RUNNING,   "Trigger mode",                                           0,  edit_method = trigger_enum)
gen.add("mirror",                         int_t,      SensorLevels.RECONFIGURE_RUNNING,   "Mirror mode",                                            3,  edit_method = mirror_enum)
gen.add("hor_subsampling",                int_t,      SensorLevels.RECONFIGURE_RUNNING,   "Horizontal subsampling mode",                            0,  edit_method = subsampling_enum)
gen.add("vert_subsampling",               int_t,      SensorLevels.RECONFIGURE_RUNNING,   "Vertical subsampling mode",                              0,  edit_method = subsampling_enum)
gen.add("flash_polarity",                 bool_t,     SensorLevels.RECONFIGURE_RUNNING,   "Flash active level.",                                    False)
gen.add("flash_delay",                    int_t,      SensorLevels.RECONFIGURE_RUNNING,   "Flash delay in microseconds.",                           -5,     -1000,  1000)
gen.add("flash_duration",                 int_t,      SensorLevels.RECONFIGURE_RUNNING,   "Flash duration in microseconds.",                        2000,   0,      100000)
gen.add("force_streaming",                bool_t,     SensorLevels.RECONFIGURE_RUNNING,   "Force the camera to stream images.",                     False)
gen.add("hardware_gamma",                 bool_t,     SensorLevels.RECONFIGURE_RUNNING,   "Sets the camera hardware gamma correction.",             True)
gen.add("auto_exposure",                  bool_t,     SensorLevels.RECONFIGURE_RUNNING,   "Sets the camera exposure duration to automatic."         ,False)
gen.add("auto_exposure_reference",    	  int_t,      SensorLevels.RECONFIGURE_RUNNING,   "Sets the camera exposure duration to automatic.",	      80,     0,      255)
gen.add("auto_exposure_max",    	        double_t,   SensorLevels.RECONFIGURE_RUNNING,   "Sets the camera exposure duration to automatic.",	      10,     0.06,   100)
gen.add("auto_exposure_speed",    	      int_t,      SensorLevels.RECONFIGURE_RUNNING,   "Sets the camera exposure duration to automatic.",	      100,    0,      100)
gen.add("auto_exposure_hysteresis",    	  int_t,      SensorLevels.RECONFIGURE_RUNNING,   "Sets the camera exposure duration to automatic.",	      2,      0,      2)
gen.add("auto_exposure_skip_frames",    	int_t,      SensorLevels.RECONFIGURE_RUNNING,   "Sets the camera exposure duration to automatic.",	      0,      0,      1000)
gen.add("exposure_time",                  double_t,   SensorLevels.RECONFIGURE_RUNNING,   "Sets the camera exposure time (ms)",                     5,      0.06,   200)
gen.add("gain_boost",                     bool_t,     SensorLevels.RECONFIGURE_RUNNING,   "Enables constant hardware analog boost.",                False)
gen.add("auto_gain",                      bool_t,     SensorLevels.RECONFIGURE_RUNNING,   "Sets the image to automatic.",                           False)
gen.add("gain",                           int_t,      SensorLevels.RECONFIGURE_RUNNING,   "Sets the image gain",                                    100,    100,    400)
gen.add("zoom",                           int_t,      SensorLevels.RECONFIGURE_RUNNING,   "Hardware subsampling",             		                  1,      1,      16)
gen.add("hardware_subsampling",           int_t,      SensorLevels.RECONFIGURE_RUNNING,   "Hardware subsampling",             		                  1,      1,      16)
gen.add("software_binning",               bool_t,     SensorLevels.RECONFIGURE_RUNNING,   "Software binning",  			                              False)
gen.add("frame_rate",                     double_t,   SensorLevels.RECONFIGURE_RUNNING,   "Sets the expected triggering rate ",                     250,     1,      300)
gen.add("pixel_clock",                    int_t,      SensorLevels.RECONFIGURE_RUNNING,   "Camera pixel clock speed in MHz",                        480,     5,      500)
gen.add("extended_pixel_clock",           bool_t,     SensorLevels.RECONFIGURE_RUNNING,   "Left Extend Pixel clock speed in MHz",                   True)
gen.add("l_frame_id",                     str_t,      SensorLevels.RECONFIGURE_RUNNING,   "The optical camera tf frame set in message headers.",    "/left")
gen.add("r_frame_id",                     str_t,      SensorLevels.RECONFIGURE_RUNNING,   "The optical camera tf frame set in message headers.",    "/right")
gen.add("l_AOI_Width",                    int_t,      SensorLevels.RECONFIGURE_RUNNING,   "Left Image Width",                                       1936, 	96,   1936)
gen.add("l_AOI_Height",                   int_t,      SensorLevels.RECONFIGURE_RUNNING,   "Left Image Height",                                      788,    2,    1216)
gen.add("l_AOI_X",                        int_t,      SensorLevels.RECONFIGURE_RUNNING,   "Left AOI Horizontal Offset from the left of the image",  0, 		  0, 	  1840)
gen.add("l_AOI_Y",                        int_t,      SensorLevels.RECONFIGURE_RUNNING,   "Left AOI Vertical Offset from the top of image",  			  230, 		0, 	  1214)
gen.add("r_AOI_Width",                    int_t,      SensorLevels.RECONFIGURE_RUNNING,   "Right Image Width",                                      1936, 	96,   1936)
gen.add("r_AOI_Height",                   int_t,      SensorLevels.RECONFIGURE_RUNNING,   "Right Image Height",                                     788,    2,    1216)
gen.add("r_AOI_X",                        int_t,      SensorLevels.RECONFIGURE_RUNNING,   "Right AOI Horizontal Offset from the left of the image", 0, 		  0, 	  1840)
gen.add("r_AOI_Y",                        int_t,      SensorLevels.RECONFIGURE_RUNNING,   "Right AOI Vertical Offset from the top of image",  			230, 		0, 	  1214)
gen.add("l_brightness_AOI_Width",         int_t,      SensorLevels.RECONFIGURE_RUNNING,   "Image Width",                                            1936, 	96,   1936)
gen.add("l_brightness_AOI_Height",        int_t,      SensorLevels.RECONFIGURE_RUNNING,   "Image Height",                                           788,    2,    1216)
gen.add("l_brightness_AOI_X",             int_t,      SensorLevels.RECONFIGURE_RUNNING,   "AOI Horizontal Offset from the left of the image",       0, 		  0, 	  1840)
gen.add("l_brightness_AOI_Y",             int_t,      SensorLevels.RECONFIGURE_RUNNING,   "AOI Vertical Offset from the top of image",  			      0,  		0, 	  1214)
gen.add("r_brightness_AOI_Width",         int_t,      SensorLevels.RECONFIGURE_RUNNING,   "Image Width",                                            1936, 	96,   1936)
gen.add("r_brightness_AOI_Height",        int_t,      SensorLevels.RECONFIGURE_RUNNING,   "Image Height",                                           788,    2,    1216)
gen.add("r_brightness_AOI_X",             int_t,      SensorLevels.RECONFIGURE_RUNNING,   "AOI Horizontal Offset from the left of the image",       0, 		  0, 	  1840)
gen.add("r_brightness_AOI_Y",             int_t,      SensorLevels.RECONFIGURE_RUNNING,   "AOI Vertical Offset from the top of image",  			      0,  		0, 	  1214)
gen.add("visualize_brightness_AOI",       bool_t,     SensorLevels.RECONFIGURE_RUNNING,   "Visualize the Brighness AOI in the image",  			        False)
gen.add("publish_extras",                 bool_t,     SensorLevels.RECONFIGURE_RUNNING,   "Publish the exposure time and PPS control values",  			True)

exit(gen.generate(PACKAGE, "ueye", "stereo"))

